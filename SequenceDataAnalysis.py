# -*- coding: utf-8 -*-
"""Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/welcome.ipynb

<p><img alt="Colaboratory logo" height="45px" src="https://colab.research.google.com/img/colab_favicon.ico" align="left" hspace="10px" vspace="0px"></p>

<h1>Welcome to Colaboratory!</h1>


Colaboratory is a free Jupyter notebook environment that requires no setup and runs entirely in the cloud.

With Colaboratory you can write and execute code, save and share your analyses, and access powerful computing resources, all for free from your browser.
"""

import pandas_datareader as web

import numpy as np
from numpy import array

import datetime

import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn import linear_model
from sklearn.metrics import median_absolute_error, r2_score

seed = 7
np.random.seed(seed)

startDate = datetime.datetime(2010, 1, 31)
endDate = datetime.datetime(2019, 12, 31)

df = web.DataReader('nvda', 'yahoo', startDate, endDate)

df.to_csv('nvda_yahoo_prices_volumes_to_csv_demo.csv')

df.head(10)

plt.style.use('ggplot')
df.plot(subplots=True)

dataValues = df.values

volumeAttribute = dataValues[:,4]
raw = volumeAttribute

len(raw)

plt.plot(raw)

def tab2seq(sequence, n_steps):
  X, y = list(), list()
  for i in range(len(sequence)):
    end_ix = i + n_steps
    if end_ix > len(sequence)-1:
      break
    seq_x, seq_y = sequence[i:end_ix], sequence[end_ix]
    X.append(seq_x)
    y.append(seq_y)
  return array(X), array(y)

window_size = 10
X, y = tab2seq(raw, window_size)
for i in range(window_size):
  print(X[i], y[i])

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.1)
x_train.size, x_test.size

x_train.shape, y_train.shape, x_test.shape, y_test.shape

model = linear_model.LinearRegression()

model.fit(x_train, y_train)

plt.plot(model.predict(x_train[0:1000:10]), color='black')
plt.plot(y_train[0:1000:10], color='red')

newPredicted = model.predict(x_test)
print('Coefficients - \n', model.coef_)
print('Median Absolute Error - %2f' % median_absolute_error(y_test, newPredicted))
print('Variance Score - % 2f' % r2_score(y_test, newPredicted))

plt.plot(y_test, color='green')
plt.plot(predicted1, color='blue')

